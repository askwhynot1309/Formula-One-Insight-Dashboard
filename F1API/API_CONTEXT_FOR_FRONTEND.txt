Formula One Insight Dashboard â€“ API Context for Frontend

General
-------
- Base URL: /api/
- All endpoints return JSON.
- Data models are based on DTOs (Data Transfer Objects) such as CircuitDto, DriverDto, etc.

Endpoints Overview
==================

1. Circuits
-----------
GET /api/circuit
- Returns: List of circuits.
- Data:
  [
    {
      "id": int,
      "name": string,
      "location": string
    }
  ]

GET /api/circuit/details?circuitId={id}
- Returns: Details for a specific circuit, including fastest laps and races.
- Data:
  {
    // CircuitDetailsDto structure (see backend for full details)
    // Typically includes circuit info and a list of fastest laps
  }

2. Drivers
----------
GET /api/driver
- Query params: status, nationality, teamId (all optional)
- Returns: List of drivers (filtered if params provided).
- Data:
  [
    {
      "id": int,
      "firstName": string,
      "lastName": string,
      "number": int,
      "nationality": string,
      "status": string,
      "teamName": string
    }
  ]

GET /api/driver/details?driverId={id}
- Returns: Detailed info for a driver.
- Data:
  {
    "id": int,
    "firstName": string,
    "lastName": string,
    "number": int,
    "nationality": string,
    "raceWin": int,
    "raceStart": int,
    "dateOfBirth": string,
    "imageUrl": string,
    "debutYear": int,
    "status": string,
    "podiums": int,
    "poles": int,
    "fastestLaps": int,
    "teamName": string
  }

POST /api/driver
- Body: AddDriverDto
- Function: Add a new driver.

PUT /api/driver
- Body: DriverDetailsUpdateDto
- Function: Update driver details.

3. Races
--------
GET /api/race/race-by-year?year={year}
- Returns: List of races for a given year.
- Data:
  [
    {
      "id": int,
      "country": string,
      "name": string,
      "date": string,
      "circuitName": string
    }
  ]

GET /api/race/race-by-circuit?circuitId={id}
- Returns: List of races for a given circuit.
- Data: Same as above.

4. Race Results
---------------
GET /api/raceresult?raceId={id}
- Returns: List of race results for a race.
- Data:
  [
    {
      "id": int,
      "position": int,
      "points": int,
      "gridPosition": int,
      "status": string,
      "lapsCompleted": int,
      "fastestLap": int,
      "pitStops": int,
      "driverName": string,
      "driverNumber": int,
      "teamName": string,
      "raceName": string,
      "raceDate": string,
      "circuitName": string,
      "circuitLocation": string
    }
  ]

POST /api/raceresult/import-race-results
- Body: Form file upload (CSV)
- Function: Import race results from a CSV file.

5. Teams
--------
GET /api/team
- Returns: List of teams.
- Data:
  [
    {
      "id": int,
      "name": string,
      "country": string,
      "foundedYear": int
    }
  ]

GET /api/team/details?teamId={id}
- Returns: Detailed info for a team, including active drivers.
- Data:
  {
    "name": string,
    "country": string,
    "foundedYear": int,
    "baseLocation": string,
    "description": string,
    "teamPrincipal": string,
    "logoUrl": string,
    "engineSuppliers": string,
    "drivers": [
      {
        "id": int,
        "firstName": string,
        "lastName": string,
        "number": int,
        "nationality": string,
        "status": string,
        "teamName": string
      }
    ]
  }

PUT /api/team
- Body: TeamUpdateDto
- Function: Update team details.

POST /api/team
- Body: AddTeamDto
- Function: Add a new team.

Notes for Frontend Developers
----------------------------
- All endpoints are RESTful and return JSON.
- Use the DTOs in Models/DTO/ for reference on data shapes.
- For POST/PUT, send JSON in the request body (except for file upload).
- For file upload (import race results), use multipart/form-data.

If you need example requests or want a Postman collection, let the backend team know! 